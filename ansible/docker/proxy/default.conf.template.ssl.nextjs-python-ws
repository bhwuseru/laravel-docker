# ============ リダイレクト HTTP → HTTPS ============
server {
    listen 80;
    server_name ${PHP_SUBDOMAIN} ${NODE_SUBDOMAIN} ${WS_SUBDOMAIN} ${PY_SUBDOMAIN};
    client_max_body_size 8192M;

    return 301 https://$host$request_uri;
}

# ============ Laravel (php-fpm) 用の仮想ホスト ============
server {
    listen 443 ssl;
    server_name ${PHP_SUBDOMAIN};

    ssl_certificate     /etc/nginx/ssl/localhost.pem;
    ssl_certificate_key /etc/nginx/ssl/localhost-key.pem;

    root /var/www/html/${PROJECT_NAME}/public;
    index index.php index.html;

    client_max_body_size 8192M;

    access_log /dev/stdout;
    error_log  /dev/stderr;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location ~ \.php$ {
        fastcgi_pass php:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    }

    # ====== Vite Dev Server for Laravel (php) ======
    # ================== Vite dev を HTTPS 配下で見せる ==================

    # /@vite/client
    location = /@vite/client {
        proxy_pass http://php:${PHP_VITE_PORT}/@vite/client;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_buffering off;
    }

    # /@vite 以下（フォールバック）
    location ^~ /@vite {
        proxy_pass http://php:${PHP_VITE_PORT}/@vite;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_buffering off;
    }

    # HMR (WebSocket: React Refresh)
    location ^~ /@react-refresh {
        proxy_pass http://php:${PHP_VITE_PORT}/@react-refresh;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 300s;
        proxy_buffering off;
    }

    location ^~ /hmr {
        proxy_pass http://php:${PHP_VITE_PORT}/hmr;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 300s;
        proxy_buffering off;
    }

    location ^~ /resources/ {
        proxy_pass http://php:${PHP_VITE_PORT}/resources/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_buffering off;
    }

    # 依存モジュール配信（これがないと /node_modules/... が 404）
    location ^~ /node_modules/ {
        proxy_pass http://php:${PHP_VITE_PORT}/node_modules/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_buffering off;
    }

    # Vite の仮想ID解決（/@id/…）
    location ^~ /@id/ {
        proxy_pass http://php:${PHP_VITE_PORT}/@id/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_buffering off;
    }

    location ^~ /@fs/ {
        proxy_pass http://php:${PHP_VITE_PORT}/@fs/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_buffering off;
    }

    location = /vite.svg {
        proxy_pass http://php:${PHP_VITE_PORT}/vite.svg;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_buffering off;
    }
}

# ============ Node.js (Next.js) 用の仮想ホスト ============
server {
    listen 443 ssl;
    server_name ${NODE_SUBDOMAIN};
    client_max_body_size 8192M;

    ssl_certificate     /etc/nginx/ssl/localhost.pem;
    ssl_certificate_key /etc/nginx/ssl/localhost-key.pem;

    access_log /dev/stdout;
    error_log  /dev/stderr;

    location / {
        proxy_pass http://node:3000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /_next/webpack-hmr {
        proxy_pass http://node:3000/_next/webpack-hmr;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 300s;
        proxy_buffering off;
    }
}

# ============ WebSocket 用の仮想ホスト ============
server {
    listen 443 ssl;
    server_name ${WS_SUBDOMAIN};
    client_max_body_size 8192M;

    ssl_certificate     /etc/nginx/ssl/localhost.pem;
    ssl_certificate_key /etc/nginx/ssl/localhost-key.pem;

    access_log /dev/stdout;
    error_log  /dev/stderr;

    location /wss/ {
        proxy_pass http://websocket:${WEBSOCKET_PORT};
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}

# ============ Python (FastAPI) 用の仮想ホスト ============
server {
    listen 443 ssl;
    server_name ${PY_SUBDOMAIN};
    client_max_body_size 8192M;

    ssl_certificate     /etc/nginx/ssl/localhost.pem;
    ssl_certificate_key /etc/nginx/ssl/localhost-key.pem;

    access_log /dev/stdout;
    error_log  /dev/stderr;

    location / {
        proxy_pass http://python:8000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # 長時間処理対応
        proxy_connect_timeout   600s;
        proxy_send_timeout      600s;
        proxy_read_timeout      600s;
        send_timeout            600s;
    }
}